import axios from "axios";
import { useEffect, useState } from "react";
import Example_2 from "./Example_2";
import Form from "./Signup";
// import {log} from './logger';
import log from '../logger';
import Signup from "./Signup";

// const Customers = () => {
// nie mialem props odbieranego, ale bledow nie bylo 
const CustomersList = (props) => {
  const [customers, setCustomers] = useState({});
  console.log("Poczatek komponentu customers", customers);
  // console.log('komunikat z log');


  // pamietaj o porcie i zrob config
  // axios.get('http://127.0.0.1/clients')

  function getCustomers() {
    axios
      .get("http://127.0.0.1:3005/clients")
      .then((result) => {
        //taki console.log automatyczny z polem no change robi problem
        // console.log("ðŸš€ ~ file: CustomerList.js:7 ~ .then ~ result:", result)
        console.log("axios f.getCustomers() w .then, result.data:", result.data);
        // console.log("ðŸš€ ~ file: CustomersList.js:7 ~ .then ~ result:", result);
        // jeÅ›li sukces
        // x getCustomers()

        // setCustomers(result) ;
        // tylko tablice z danymi nie obiekt potrzebuje
        setCustomers(result.data);
        // ^ ustawiam customers na result setterem zeby przekazac props do Example
        // console.log("po ustawieniu: customers w getCustomers()", customers);
        // console.log('aktualizacje stanu w React sÄ… asynchroniczne. Kiedy wywoÅ‚ujesz setCustomers(result.data), React nie aktualizuje stanu customers od razu. Dlatego, gdy logujesz customers bezpoÅ›rednio po wywoÅ‚aniu getCustomers(), moÅ¼e on nadal pokazywaÄ‡ poprzedni stan,Aby zalogowaÄ‡ zaktualizowany stan, moÅ¼esz uÅ¼yÄ‡ hooka useEffect z customers jako zaleÅ¼noÅ›ciÄ…:');
        

        /*     {result.map((client) => {
                    console.log('client',client) 
                    
                })} */
      })
      .catch((err) => {
        /// obsÅ‚uga bÅ‚Ä™dÃ³w za pomocÄ… funkcji anonimowej (err to parameter funkcji)
        console.warn('error_axios:',err);
      });
  }
  // useEffect do uruchomienia getCustomers po zamontowaniu komponentu

  useEffect(() => {
    getCustomers();
    // tu sie funkcja wykonuje zeby sie wyswietliÅ‚a!!!
    // console.log("w useEffect[pusta - 1 raz po mount] wyswietlam getCustomers: ", getCustomers());
    console.log("w useEffect/po getCustomers() [pusta - 1 raz po mount] wyswietlam customers: ", customers);
  }, []);
  // ^ pusta tablica zaleÅ¼noÅ›ci oznacza, Å¼e useEffect bÄ™dzie uruchomiony tylko raz po zamontowaniu

  useEffect(() => {
    console.log(
      "use Effect[customers] wyswietlam customers:w getCustomers() w useEffect() ",
      customers
    );
  }, [customers]);

  return (
    <div className="container">
      <h1>CustomerList component</h1>
      <Example_2 customers={customers} getCustomers={getCustomers} />
      {/* <Signup customers={customers} getCustomers={getCustomers} /> */}
    </div>
  );
};

// tu dziala? tu jest nie zdefiniowana!
// console.log('wyswietlam getCustomers: ', getCustomers());
export default CustomersList;
// tu tez.to gdzie ja moge uruchomic?
// console.log('wyswietlam getCustomers: ', getCustomers());
